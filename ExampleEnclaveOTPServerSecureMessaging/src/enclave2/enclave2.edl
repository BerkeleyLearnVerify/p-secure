enclave {
    from "sgx_tstdc.edl" import *;
    include "sgx_eid.h"
    include "datatypes.h"
    include "../Include/dh_session_protocol.h"

    trusted {
        /* define ECALLs here. */
        public int generate_random_number(void);
        public uint32_t session_request_enclave2(sgx_enclave_id_t src_enclave_id, [out] sgx_dh_msg1_t *dh_msg1, [out] uint32_t *session_id);
        public uint32_t exchange_report_enclave2(sgx_enclave_id_t src_enclave_id, [in] sgx_dh_msg2_t *dh_msg2, [out] sgx_dh_msg3_t *dh_msg3, uint32_t session_id);
        public uint32_t generate_response_enclave2(sgx_enclave_id_t src_enclave_id, [in, size = req_message_size] secure_message_t* req_message, size_t req_message_size, size_t max_payload_size, [out, size=resp_message_size] secure_message_t* resp_message, size_t resp_message_size );
        public uint32_t end_session_enclave2(sgx_enclave_id_t src_enclave_id); 
        public uint32_t test_create_session_enclave2(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id);
            public uint32_t test_enclave_to_enclave_call_enclave2(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id);
            public uint32_t test_message_exchange_enclave2(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id, [in, string] char* message, int messagelen);
            public uint32_t test_close_session_enclave2(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print([in, string]const char* str);
        void ocall_print_int(int print_int);
        uint32_t session_request_ocall(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id, [out] sgx_dh_msg1_t *dh_msg1,[out] uint32_t *session_id);
        uint32_t exchange_report_ocall(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id, [in] sgx_dh_msg2_t *dh_msg2, [out] sgx_dh_msg3_t *dh_msg3, uint32_t session_id);
        uint32_t send_request_ocall(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id, [in, size = req_message_size] secure_message_t* req_message, size_t req_message_size, size_t max_payload_size, [out, size=resp_message_size] secure_message_t* resp_message, size_t resp_message_size);
        uint32_t end_session_ocall(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id);

    };
};
