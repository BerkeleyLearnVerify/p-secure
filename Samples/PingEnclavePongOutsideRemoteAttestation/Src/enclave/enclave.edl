enclave {
    from "sgx_tstdc.edl" import *;
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"

    trusted {
        /* define ECALLs here. */
        public int enclave_main(void);
        public sgx_status_t enclave_init_ra(int b_pse,
                                            [out] sgx_ra_context_t *p_context);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message, 
                                                  size_t message_size, 
                                                  [in,size=mac_size] uint8_t* mac, 
                                                  size_t mac_size);
        public sgx_status_t put_secret_data(sgx_ra_context_t context,  
                                            [in,size=secret_size] uint8_t* p_secret,
                                            uint32_t secret_size,
                                            [in,count=16] uint8_t* gcm_mac);
        public sgx_status_t encrypt_secure_message(sgx_ra_context_t context,
                                                            [out, size=requested_secret_size] uint8_t* return_encrypted_string,
                                                            uint32_t requested_secret_size,
                                                            [out, size=4] uint32_t* return_secret_size,
                                                            [out, size=16] uint8_t* return_payload_tag);
        public int pong_enclave_request_attestation([in, size=16] const char* other_machine_name);

    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print([in, string]const char* str);
        int ocall_pong_enclave_attestation_in_thread([in,size=other_machine_name_size] char* other_machine_name, 
                                                    uint32_t other_machine_name_size,
                                                    int message_from_machine_to_enclave);
        int ocall_ping_machine_receive_encrypted_message([in,size=secret_size] uint8_t *p_secret, 
                                uint32_t secret_size,
                                 [in,count=16] uint8_t *p_gcm_mac);
    };
};
