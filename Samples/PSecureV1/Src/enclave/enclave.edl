enclave {
    from "sgx_tstdc.edl" import *;
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"

    trusted {
        /* define ECALLs here. */
        public sgx_status_t enclave_init_ra(int b_pse,
                                            [out] sgx_ra_context_t *p_context);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message, 
                                                  size_t message_size, 
                                                  [in,size=mac_size] uint8_t* mac, 
                                                  size_t mac_size);
        public sgx_status_t put_secret_data(sgx_ra_context_t context,  
                                            [in,size=secret_size] uint8_t* p_secret,
                                            uint32_t secret_size,
                                            [in,count=16] uint8_t* gcm_mac);
        public sgx_status_t encrypt_secure_message(sgx_ra_context_t context,
                                                            [out, size=requested_secret_size] uint8_t* return_encrypted_string,
                                                            uint32_t requested_secret_size,
                                                            [out, size=16] uint8_t* return_payload_tag);

        public int decryptAndSendMessageAPI([in, size=ID_SIZE]char* requestingMachineIDKey, 
                                            [in, size=ID_SIZE]char* receivingMachineIDKey, 
                                            [in, size=12] char* iv,
                                            [in, size=16] char* mac,
                                            [in, size=MAX_ENCRYPTED_MESSAGE]char* encryptedMessage, 
                                            [out, size=MAX_RESPONSE_SIZE]char* response,
                                            int isSecureSend,
                                            uint32_t ID_SIZE, 
                                            uint32_t MAX_ENCRYPTED_MESSAGE,
                                            uint32_t MAX_RESPONSE_SIZE);

        public int createMachineAPI(sgx_enclave_id_t currentEid,
                                    [in, size=ID_SIZE] char* machineName, 
                                    [in, size=ID_SIZE]char* parentTrustedMachineID,
                                    [out, size=ID_SIZE] char* returnNewMachineID,
                                    int numArgs, 
                                    int payloadType,
                                    [in, size=PAYLOAD_SIZE]char* payload, 
                                    int payloadSize,
                                    uint32_t ID_SIZE, uint32_t PAYLOAD_SIZE, sgx_enclave_id_t enclaveEid);
        
        public int initializeCommunicationAPI([in, size=ID_SIZE]char* requestingMachineIDKey,
                                             [in, size=ID_SIZE]char* receivingMachineIDKey, 
                                             [in, size=SESSION_SIZE]char* newSessionKey, 
                                             [out, size=100]char* returnMessage,
                                              uint32_t ID_SIZE,
                                             uint32_t SESSION_SIZE);

        public int verifySignatureEcall(   [in, size=MESSAGE_SIZE]char* message,
                                            uint32_t MESSAGE_SIZE,
                                            [in, size=SIZE_OF_SIGNATURE]char* signature,
                                            [in, size=SIZE_OF_PUBLIC_KEY]char* public_key,
                                            uint32_t SIZE_OF_SIGNATURE,
                                            uint32_t SIZE_OF_PUBLIC_KEY);
        public void signStringMessageEcall( [in, size=MESSAGE_SIZE]char* message, 
                                    int MESSAGE_SIZE, 
                                    [in, size=private_key_size] char *private_key, 
                                    [out, size=signature_size] char* signature_out, 
                                    uint32_t private_key_size, 
                                    uint32_t signature_size);

        public void UntrustedCreateMachineAPI(sgx_enclave_id_t currentEid,
                                                [in, size=lengthString]char* machineTypeToCreate, 
                                                int lengthString,
                                                [out, size=output_length] char* returnNewMachinePublicID,
                                                int numArgs, 
                                                int payloadType,
                                                [in, size=payload_size] char* payload,
                                                int payload_length,
                                                int output_length, 
                                                int payload_size,
                                                sgx_enclave_id_t enclaveEid);
        public void encryptMessageExternalPublicKeyEcall(
                                                [in, size=message_length_with_null_byte] char* message, 
                                                size_t message_length_with_null_byte, 
                                                [in, size=SIZE_OF_KEY_RAW]char* other_party_public_key_raw, 
                                                [out, size=SIZE_OF_KEY_RAW]char* output_encrypted_message, 
                                                [in, size=SIZE_OF_KEY]char* other_party_public_key,
                                                uint32_t SIZE_OF_KEY_RAW,
                                                uint32_t SIZE_OF_KEY);
        public void decryptMessageInteralPrivateKeyEcall(
                                                [in, size=message_length_with_null_byte] char* message, 
                                                size_t message_length_with_null_byte, 
                                                [in, size=SIZE_OF_KEY]char* other_party_public_key_raw, 
                                                [out, size=SIZE_OF_KEY]char* output_encrypted_message, 
                                                uint32_t SIZE_OF_KEY);
        public void createRsaKeyPairEcall([out, size=KEY_SIZE]char* public_key_raw_out, 
                                    [out, size=KEY_SIZE]char* private_key_raw_out, 
                                    [out, size=388]char* public_key_out, 
                                    [out, size=772]char* private_key_out,
                                    uint32_t KEY_SIZE);
        public void eprint([in, size=50]char* printStr);

        public void sgx_read_rand_ecall([in, out, size=NUM_BYTES_RAND] char* rand_buffer, uint32_t NUM_BYTES_RAND);

        public void sgx_rijndael128GCM_decrypt_Ecall([in, size=16]const sgx_aes_gcm_128bit_key_t *p_key,
                                                [in, size=src_len]const uint8_t *p_src,
                                                uint32_t src_len,
                                                [out, size=src_len]uint8_t *p_dst,
                                                [in, size=iv_len]const uint8_t *p_iv,
                                                uint32_t iv_len,
                                                [in, size=aad_len]const uint8_t *p_aad,
                                                uint32_t aad_len,
                                                [in, size=16]const sgx_aes_gcm_128bit_tag_t *p_in_mac);
                                                
        public void sgx_rijndael128GCM_encrypt_Ecall([in, size=16]const sgx_aes_gcm_128bit_key_t *p_key,
                                                [in, size=src_len]const uint8_t *p_src,
                                                uint32_t src_len,
                                                [out, size=src_len]uint8_t *p_dst,
                                                [in, size=iv_len]const uint8_t *p_iv,
                                                uint32_t iv_len,
                                                [in, size=aad_len]const uint8_t *p_aad,
                                                uint32_t aad_len,
                                                [out, size=16]sgx_aes_gcm_128bit_tag_t *p_out_mac);

        public void sgx_ecc256_open_context_Ecall([out]sgx_ecc_state_handle_t* ecc_handle);

        public void sgx_ecc256_close_context_Ecall(sgx_ecc_state_handle_t ecc_handle);

        public void sgx_ecc256_create_key_pair_Ecall([out, size=32]sgx_ec256_private_t *p_private,
                                        [out, size=64]sgx_ec256_public_t *p_public,
                                        sgx_ecc_state_handle_t ecc_handle);

        public void sgx_ecc256_compute_shared_dhkey_Ecall([in, size=32]sgx_ec256_private_t *p_private_b,
                                             [in, size=64]sgx_ec256_public_t *p_public_ga,
                                             [out, size=32]sgx_ec256_dh_shared_t *p_shared_key,
                                        sgx_ecc_state_handle_t ecc_handle);

    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print([in, string]const char* str);
        void ocall_enclave_print([in, string]const char* str);
        void ocall_print_current_time();
        void ocall_print_int(int intPrint);
        void ocall_request_user_input([out, size=INPUT_SIZE] char* user_input, uint32_t INPUT_SIZE);
        int ocall_enclave_attestation_in_thread( sgx_enclave_id_t currentEid,
                                                    [in,size=other_machine_name_size] char* other_machine_name, 
                                                    uint32_t other_machine_name_size);
                                 //below passes when i do string
        int ocall_network_request([in, size=REQUEST_SIZE]char* request, [out, size=RESPONSE_SIZE]char* response, uint32_t REQUEST_SIZE, uint32_t RESPONSE_SIZE, [in, size=IP_ADDRESS_SIZE]char* ipAddress, uint32_t IP_ADDRESS_SIZE, int port);
        void ocall_add_identity_to_eid_dictionary([in, size=ID_SIZE]char* newMachineID, uint32_t ID_SIZE, sgx_enclave_id_t enclave_eid);
        void ocall_get_ip_address_of_current_host([out, size=MAX_IP_ADDRESS_SIZE]char* ipAddress, int MAX_IP_ADDRESS_SIZE);
        int ocall_get_port_of_current_host();
        void ocall_get_ip_address_of_kps([out, size=MAX_IP_ADDRESS_SIZE]char* ipAddress, int MAX_IP_ADDRESS_SIZE);
        int ocall_get_attestation_port_of_kps();
        int ocall_get_generic_port_of_kps();



    };
};
